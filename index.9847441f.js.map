{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState;\n        this.state = this.cloneState(this.initialState);\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    createRandomCell() {\n        const newField = [];\n        for(let x = 0; x < 4; x++){\n            for(let y = 0; y < 4; y++)if (this.state[x][y] === 0) newField.push([\n                x,\n                y\n            ]);\n        }\n        if (newField.length > 0) {\n            const randomCellIndex = Math.floor(Math.random() * newField.length);\n            const [x, y] = newField[randomCellIndex];\n            this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    combineCell(cells) {\n        const newCells = cells.filter((cell)=>cell !== 0);\n        for(let i = 0; i < newCells.length - 1; i++)if (newCells[i] === newCells[i + 1]) {\n            newCells[i] *= 2;\n            newCells[i + 1] = 0;\n            this.score += newCells[i];\n        }\n        return newCells.filter((cell)=>cell !== 0);\n    }\n    rotateState(state) {\n        const rotatedState = [];\n        for(let y = 0; y < 4; y++){\n            rotatedState[y] = [];\n            for(let x = 3; x >= 0; x--)rotatedState[y].push(state[x][y]);\n        }\n        return rotatedState;\n    }\n    rotateStateBack(state) {\n        const rotatedState = [];\n        for(let y = 0; y < 4; y++){\n            rotatedState[y] = [];\n            for(let x = 0; x < 4; x++)rotatedState[y].push(state[x][y]);\n        }\n        return rotatedState.reverse();\n    }\n    moveRowLeft(row) {\n        const newRow = this.combineCell(row);\n        while(newRow.length < 4)newRow.push(0);\n        return newRow;\n    }\n    moveRowRight(row) {\n        const newRow = this.combineCell(row);\n        while(newRow.length < 4)newRow.unshift(0);\n        return newRow;\n    }\n    moveStateLeft(state) {\n        const newState = [];\n        for (const row of state)newState.push(this.moveRowLeft(row));\n        return newState;\n    }\n    moveStateRight(state) {\n        const newState = [];\n        for (const row of state)newState.push(this.moveRowRight(row));\n        return newState;\n    }\n    moveStateUp(state) {\n        const rotatedState = this.rotateState(state);\n        const rotatedMoveRight = this.moveStateRight(rotatedState);\n        return this.rotateStateBack(rotatedMoveRight);\n    }\n    moveStateDown(state) {\n        const rotatedState = this.rotateState(state);\n        const rotatedMoveLeft = this.moveStateLeft(rotatedState);\n        return this.rotateStateBack(rotatedMoveLeft);\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const stateBeforeMove = this.cloneState(this.state);\n        this.checkGameStatus();\n        if (this.hasEmptyCell || this.canCombineCells) switch(direction){\n            case \"left\":\n                this.state = this.moveStateLeft(this.state);\n                break;\n            case \"right\":\n                this.state = this.moveStateRight(this.state);\n                break;\n            case \"up\":\n                this.state = this.moveStateUp(this.state);\n                break;\n            case \"down\":\n                this.state = this.moveStateDown(this.state);\n                break;\n        }\n        return !this.areStatesEqual(this.state, stateBeforeMove);\n    }\n    moveLeft() {\n        const canMove = this.move(\"left\");\n        if (canMove) {\n            this.createRandomCell();\n            this.checkGameStatus();\n        }\n    }\n    moveRight() {\n        const canMove = this.move(\"right\");\n        if (canMove) {\n            this.createRandomCell();\n            this.checkGameStatus();\n        }\n    }\n    moveUp() {\n        const canMove = this.move(\"up\");\n        if (canMove) {\n            this.createRandomCell();\n            this.checkGameStatus();\n        }\n    }\n    moveDown() {\n        const canMove = this.move(\"down\");\n        if (canMove) {\n            this.createRandomCell();\n            this.checkGameStatus();\n        }\n    }\n    checkGameStatus() {\n        if (!this.hasEmptyCell() && !this.canCombineCells()) {\n            this.status = \"lose\";\n            return;\n        }\n        for(let x = 0; x < 4; x++){\n            for(let y = 0; y < 4; y++)if (this.state[x][y] === 2048) {\n                this.status = \"win\";\n                return;\n            }\n        }\n    }\n    hasEmptyCell() {\n        for(let x = 0; x < 4; x++)for(let y = 0; y < 4; y++){\n            if (this.state[x][y] === 0) return true;\n        }\n        return false;\n    }\n    canCombineCells() {\n        for(let x = 0; x < 4; x++)for(let y = 0; y < 4; y++){\n            if (y < 3 && this.state[x][y] === this.state[x][y + 1] || x < 3 && this.state[x][y] === this.state[x + 1][y]) return true;\n        }\n        return false;\n    }\n    areStatesEqual(state1, state2) {\n        for(let x = 0; x < 4; x++)for(let y = 0; y < 4; y++){\n            if (state1[x][y] !== state2[x][y]) return false;\n        }\n        return true;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.createRandomCell();\n            this.createRandomCell();\n        }\n    }\n    restart() {\n        if (this.status === \"playing\" || this.status === \"lose\") this.state = this.cloneState(this.initialState);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateState();\n    }\n});\nfunction $09e991522ca7e64e$var$updateState() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    let i = 0;\n    for(let x = 0; x < 4; x++)for(let y = 0; y < 4; y++){\n        const cell = $09e991522ca7e64e$var$cells[i];\n        cell.className = \"field-cell\";\n        if (state[x][y] !== 0) {\n            cell.textContent = state[x][y];\n            cell.classList.add(`field-cell--${state[x][y]}`);\n        } else cell.textContent = \"\";\n        i++;\n    }\n    document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.className === \"button restart\") $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$button.className = \"button restart\";\n    $09e991522ca7e64e$var$updateState();\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.9847441f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('button');\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    updateState();\n  }\n});\n\nfunction updateState() {\n  const state = game.getState();\n  let i = 0;\n\n  for (let x = 0; x < 4; x++) {\n    for (let y = 0; y < 4; y++) {\n      const cell = cells[i];\n\n      cell.className = 'field-cell';\n\n      if (state[x][y] !== 0) {\n        cell.textContent = state[x][y];\n        cell.classList.add(`field-cell--${state[x][y]}`);\n      } else {\n        cell.textContent = '';\n      }\n\n      i++;\n    }\n  }\n\n  document.querySelector('.game-score').textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (button.className === 'button restart') {\n    game.restart();\n  }\n\n  game.start();\n\n  button.textContent = 'Restart';\n  button.className = 'button restart';\n\n  updateState();\n\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n    this.state = this.cloneState(this.initialState);\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  createRandomCell() {\n    const newField = [];\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (this.state[x][y] === 0) {\n          newField.push([x, y]);\n        }\n      }\n    }\n\n    if (newField.length > 0) {\n      const randomCellIndex = Math.floor(Math.random() * newField.length);\n\n      const [x, y] = newField[randomCellIndex];\n\n      this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  combineCell(cells) {\n    const newCells = cells.filter((cell) => cell !== 0);\n\n    for (let i = 0; i < newCells.length - 1; i++) {\n      if (newCells[i] === newCells[i + 1]) {\n        newCells[i] *= 2;\n        newCells[i + 1] = 0;\n        this.score += newCells[i];\n      }\n    }\n\n    return newCells.filter((cell) => cell !== 0);\n  }\n\n  rotateState(state) {\n    const rotatedState = [];\n\n    for (let y = 0; y < 4; y++) {\n      rotatedState[y] = [];\n\n      for (let x = 3; x >= 0; x--) {\n        rotatedState[y].push(state[x][y]);\n      }\n    }\n\n    return rotatedState;\n  }\n\n  rotateStateBack(state) {\n    const rotatedState = [];\n\n    for (let y = 0; y < 4; y++) {\n      rotatedState[y] = [];\n\n      for (let x = 0; x < 4; x++) {\n        rotatedState[y].push(state[x][y]);\n      }\n    }\n\n    return rotatedState.reverse();\n  }\n\n  moveRowLeft(row) {\n    const newRow = this.combineCell(row);\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  moveRowRight(row) {\n    const newRow = this.combineCell(row);\n\n    while (newRow.length < 4) {\n      newRow.unshift(0);\n    }\n\n    return newRow;\n  }\n\n  moveStateLeft(state) {\n    const newState = [];\n\n    for (const row of state) {\n      newState.push(this.moveRowLeft(row));\n    }\n\n    return newState;\n  }\n\n  moveStateRight(state) {\n    const newState = [];\n\n    for (const row of state) {\n      newState.push(this.moveRowRight(row));\n    }\n\n    return newState;\n  }\n\n  moveStateUp(state) {\n    const rotatedState = this.rotateState(state);\n\n    const rotatedMoveRight = this.moveStateRight(rotatedState);\n\n    return this.rotateStateBack(rotatedMoveRight);\n  }\n\n  moveStateDown(state) {\n    const rotatedState = this.rotateState(state);\n\n    const rotatedMoveLeft = this.moveStateLeft(rotatedState);\n\n    return this.rotateStateBack(rotatedMoveLeft);\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const stateBeforeMove = this.cloneState(this.state);\n\n    this.checkGameStatus();\n\n    if (this.hasEmptyCell || this.canCombineCells) {\n      switch (direction) {\n        case 'left':\n          this.state = this.moveStateLeft(this.state);\n          break;\n\n        case 'right':\n          this.state = this.moveStateRight(this.state);\n          break;\n\n        case 'up':\n          this.state = this.moveStateUp(this.state);\n          break;\n\n        case 'down':\n          this.state = this.moveStateDown(this.state);\n          break;\n      }\n    }\n\n    return !this.areStatesEqual(this.state, stateBeforeMove);\n  }\n\n  moveLeft() {\n    const canMove = this.move('left');\n\n    if (canMove) {\n      this.createRandomCell();\n      this.checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    const canMove = this.move('right');\n\n    if (canMove) {\n      this.createRandomCell();\n      this.checkGameStatus();\n    }\n  }\n\n  moveUp() {\n    const canMove = this.move('up');\n\n    if (canMove) {\n      this.createRandomCell();\n      this.checkGameStatus();\n    }\n  }\n\n  moveDown() {\n    const canMove = this.move('down');\n\n    if (canMove) {\n      this.createRandomCell();\n      this.checkGameStatus();\n    }\n  }\n\n  checkGameStatus() {\n    if (!this.hasEmptyCell() && !this.canCombineCells()) {\n      this.status = 'lose';\n\n      return;\n    }\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (this.state[x][y] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n  }\n\n  hasEmptyCell() {\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (this.state[x][y] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canCombineCells() {\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (\n          (y < 3 && this.state[x][y] === this.state[x][y + 1]) ||\n          (x < 3 && this.state[x][y] === this.state[x + 1][y])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  areStatesEqual(state1, state2) {\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (state1[x][y] !== state2[x][y]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.createRandomCell();\n      this.createRandomCell();\n    }\n  }\n\n  restart() {\n    if (this.status === 'playing' || this.status === 'lose') {\n      this.state = this.cloneState(this.initialState);\n    }\n\n    this.status = 'idle';\n    this.score = 0;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","status","state","cloneState","map","row","createRandomCell","newField","x","y","push","length","randomCellIndex","Math","floor","random","combineCell","cells","newCells","filter","cell","i","rotateState","rotatedState","rotateStateBack","reverse","moveRowLeft","newRow","moveRowRight","unshift","moveStateLeft","newState","moveStateRight","moveStateUp","rotatedMoveRight","moveStateDown","rotatedMoveLeft","move","direction","stateBeforeMove","checkGameStatus","hasEmptyCell","canCombineCells","areStatesEqual","moveLeft","moveRight","moveUp","moveDown","state1","state2","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$updateState","className","textContent","classList","add","gameStatus","remove","addEventListener","e","key"],"version":3,"file":"index.9847441f.js.map"}